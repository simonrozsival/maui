parameters:
  platform: '' # [ android, ios, catalyst, windows ]
  path: '' # path to csproj
  device: '' # the xharness device to use
  apiversion: '' # the iOS device api version to use
  cakeArgs: '' # additional cake args
  provisionatorChannel: 'latest'
  agentPoolAccessToken: ''
  artifactName: 'nuget'
  artifactItemPattern: '**/*.nupkg'
  checkoutDirectory: $(System.DefaultWorkingDirectory)
  useArtifacts: false
  rebootAgent: true

steps:
  - template: provision.yml
    parameters:
      ${{ if eq(parameters.platform, 'windows')}}:
        platform: windows
      ${{ if or(eq(parameters.platform, 'ios'), eq(parameters.platform, 'catalyst'), eq(parameters.platform, 'android'))}}:
        platform: macos
      skipXcode: ${{ or(eq(parameters.platform, 'android'), eq(parameters.platform, 'windows')) }}
      skipProvisioning: ${{ eq(parameters.platform, 'windows') }}
      ${{ if eq(parameters.platform, 'ios')}}:
        skipAndroidSdks: false
        skipAndroidImages: true
      provisionatorChannel: ${{ parameters.provisionatorChannel }}

  - pwsh: ./build.ps1 --target=dotnet --configuration="Release" --verbosity=diagnostic
    displayName: 'Install .NET'
    retryCountOnTaskFailure: 3
    env:
      DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
      PRIVATE_BUILD: $(PrivateBuild)

  - pwsh: echo "##vso[task.prependpath]$(DotNet.Dir)"
    displayName: 'Add .NET to PATH'

  - ${{ if eq(parameters.useArtifacts, true) }}:

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Packages'
      inputs:
        artifactName: ${{ parameters.artifactName }}
        itemPattern: ${{ parameters.artifactItemPattern }}
        downloadPath: $(System.DefaultWorkingDirectory)/artifacts

    - pwsh: Move-Item -Path artifacts\${{ parameters.artifactName }}\*.nupkg -Destination artifacts -Force
      displayName: Move the downloaded artifacts

    - pwsh: ./build.ps1 --target=dotnet-local-workloads --verbosity=diagnostic
      displayName: 'Install .NET (Local Workloads)'
      retryCountOnTaskFailure: 2
      workingDirectory: ${{ parameters.checkoutDirectory }}
      env:
        DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
        PRIVATE_BUILD: $(PrivateBuild)

  - ${{ else }}:
    - pwsh: ./build.ps1 --target=dotnet-buildtasks --configuration="Release"
      displayName: 'Build the MSBuild Tasks'

  - pwsh: |
      $platformName = 'Windows'
      if ($IsMacOS) {
        $platformName = 'Mac'
      } elseif ($IsLinux) {
        $platformName = 'Linux'
      }
      Write-Host "Platform.Name: ${platformName}"
      Write-Host "##vso[task.setvariable variable=Platform.Name]${platformName}"
    displayName: 'Set Platform.Name'

  - ${{ if eq(parameters.platform, 'ios')}}:
    - bash: |
        rm -r $HOME/Library/Logs/CoreSimulator/*
        rm -r $HOME/Library/Logs/DiagnosticReports/*
      displayName: Delete Old Simulator Logs
      condition: always()
      continueOnError: true

  - pwsh: |
      ./build.ps1 -Script eng/devices/${{ parameters.platform }}.cake --project="${{ parameters.path }}" --device=${{ parameters.device }} --apiversion=${{ parameters.apiversion }} --packageid=${{ parameters.windowsPackageId }} --results="$(TestResultsDirectory)" --binlog="$(LogDirectory)" ${{ parameters.cakeArgs }}
    displayName: $(Agent.JobName)
    workingDirectory: ${{ parameters.checkoutDirectory }}
    condition: and(succeeded(), ne(variables['Platform.Name'], 'Mac'))
    retryCountOnTaskFailure: 1

  - bash: |
      # Execute the powershell script from a bash shell on Mac to avoid interference between powershell processes that lead to this error: The STDIO streams did not close within 10 seconds of the exit event from process '/usr/local/bin/pwsh'. This may indicate a child process inherited the STDIO streams and has not yet exited.
      pwsh ./build.ps1 -Script eng/devices/${{ parameters.platform }}.cake --project="${{ parameters.path }}" --device=${{ parameters.device }} --apiversion=${{ parameters.apiversion }} --packageid=${{ parameters.windowsPackageId }} --results="$(TestResultsDirectory)" --binlog="$(LogDirectory)" ${{ parameters.cakeArgs }}
    displayName: $(Agent.JobName)
    workingDirectory: ${{ parameters.checkoutDirectory }}
    condition: and(succeeded(), eq(variables['Platform.Name'], 'Mac'))
    retryCountOnTaskFailure: 1

  - ${{ if eq(parameters.platform, 'ios')}}:
    - bash: |
        suffix=$(date +%Y%m%d%H%M%S)
        zip -9r "$(LogDirectory)/CoreSimulatorLog_${suffix}.zip" "$HOME/Library/Logs/CoreSimulator/"
        zip -9r "$(LogDirectory)/DiagnosticReports_${suffix}.zip" "$HOME/Library/Logs/DiagnosticReports/"
      displayName: Zip Simulator Logs
      condition: always()
      continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish the $(Agent.JobName) test results
    condition: always()
    inputs:
      testResultsFormat: xUnit
      testResultsFiles: '$(TestResultsDirectory)/**/TestResults*(-*).xml'
      testRunTitle: '$(Agent.JobName) (attempt $(System.JobAttempt))'

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    condition: always()
    inputs:
      artifactName: '$(Agent.JobName) (attempt $(System.JobAttempt))'

  - ${{ if eq(parameters.rebootAgent, true) }}:
    # This must always be placed as the last step in the job
    - template: agent-rebooter/mac.v1.yml@yaml-templates
      parameters:
        AgentPoolAccessToken: ${{ parameters.agentPoolAccessToken }}
