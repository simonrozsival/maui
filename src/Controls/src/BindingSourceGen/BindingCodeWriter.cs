using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;

namespace Microsoft.Maui.Controls.BindingSourceGen;

public sealed class BindingCodeWriter
{
	public static string GeneratedCodeAttribute => $"[GeneratedCodeAttribute(\"{typeof(BindingCodeWriter).Assembly.FullName}\", \"{typeof(BindingCodeWriter).Assembly.GetName().Version}\")]";

	public string GenerateCode()
	{
		if (_bindings.Count == 0)
		{
			return string.Empty;
		}

		return DoGenerateCode();
	}

	private string DoGenerateCode() => $$"""
		//------------------------------------------------------------------------------
		// <auto-generated>
		//     This code was generated by a .NET MAUI source generator.
		//
		//     Changes to this file may cause incorrect behavior and will be lost if
		//     the code is regenerated.
		// </auto-generated>
		//------------------------------------------------------------------------------
		#nullable enable

		namespace System.Runtime.CompilerServices
		{
			using System;
			using System.CodeDom.Compiler;
		
			{{GeneratedCodeAttribute}}
			[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
			file sealed class InterceptsLocationAttribute : Attribute
			{
				public InterceptsLocationAttribute(string filePath, int line, int column)
				{
					FilePath = filePath;
					Line = line;
					Column = column;
				}
		
				public string FilePath { get; }
				public int Line { get; }
				public int Column { get; }
			}
		}

		namespace Microsoft.Maui.Controls.Generated
		{
			using System;
			using System.CodeDom.Compiler;
			using System.Runtime.CompilerServices;
			using Microsoft.Maui.Controls.Internals;

			{{GeneratedCodeAttribute}}
			file static class GeneratedBindableObjectExtensions
			{
				{{GenerateBindingMethods(indent: 2)}}
		
				private static bool ShouldUseSetter(BindingMode mode, BindableProperty bindableProperty)
					=> mode == BindingMode.OneWayToSource
						|| mode == BindingMode.TwoWay
						|| (mode == BindingMode.Default
							&& (bindableProperty.DefaultBindingMode == BindingMode.OneWayToSource
								|| bindableProperty.DefaultBindingMode == BindingMode.TwoWay));
			}
		}
		""";

	private readonly List<CodeWriterBinding> _bindings = new();

	public void AddBinding(CodeWriterBinding binding)
	{
		_bindings.Add(binding);
	}

	private string GenerateBindingMethods(int indent)
	{
		using var builder = new BidningInterceptorCodeBuilder(indent);

		for (int i = 0; i < _bindings.Count; i++)
		{
			builder.AppendSetBindingInterceptor(id: i + 1, _bindings[i]);
		}

		return builder.ToString();
	}

	public sealed class BidningInterceptorCodeBuilder : IDisposable
	{
		private StringWriter _stringWriter;
		private IndentedTextWriter _indentedTextWriter;

		public override string ToString()
		{
			_indentedTextWriter.Flush();
			return _stringWriter.ToString();
		}

		public BidningInterceptorCodeBuilder(int indent = 0)
		{
			_stringWriter = new StringWriter(CultureInfo.InvariantCulture);
			_indentedTextWriter = new IndentedTextWriter(_stringWriter, "\t") { Indent = indent };
		}

		public void AppendSetBindingInterceptor(int id, CodeWriterBinding binding)
		{
			AppendBlankLine();

			AppendLine(GeneratedCodeAttribute);
			AppendInterceptorAttribute(binding.Location);
			Append($"public static void SetBinding{id}");
			if (binding.SourceType.IsGenericParameter && binding.PropertyType.IsGenericParameter)
			{
				Append($"<{binding.SourceType}, {binding.PropertyType}>");
			}
			else if (binding.SourceType.IsGenericParameter)
			{
				Append($"<{binding.SourceType}>");
			}
			else if (binding.PropertyType.IsGenericParameter)
			{
				Append($"<{binding.PropertyType}>");
			}
			AppendLine('(');

			AppendLines($$"""
					this BindableObject bindableObject,
					BindableProperty bindableProperty,
					Func<{{binding.SourceType}}, {{binding.PropertyType}}> getter,
					BindingMode mode = BindingMode.Default,
					IValueConverter? converter = null,
					object? converterParameter = null,
					string? stringFormat = null,
					object? source = null,
					object? fallbackValue = null,
					object? targetNullValue = null)
				{
					Action<{{binding.SourceType}}, {{binding.PropertyType}}>? setter = null;
					if (ShouldUseSetter(mode, bindableProperty))
					{
				""");

			Indent();
			Indent();

			if (binding.GenerateSetter)
			{
				AppendLines("""
					setter = static (source, value) =>
					{
					""");
				Indent();

				AppendSetterAction(binding.SourceType, binding.Path);

				Unindent();
				AppendLine("};");
			}
			else
			{
				AppendLine("throw new InvalidOperationException(\"Cannot set value on the source object.\");"); // TODO improve exception wording
			}

			Unindent();
			Unindent();

			AppendLines($$"""
					}

					var binding = new TypedBinding<{{binding.SourceType}}, {{binding.PropertyType}}>(
						getter: source => (getter(source), true),
						setter,
				""");


			Indent();
			Indent();

			Append("handlers: ");
			AppendHandlersArray(binding.SourceType, binding.Path);
			AppendLine(")");

			Unindent();
			Unindent();

			AppendLines($$"""
					{
						Mode = mode,
						Converter = converter,
						ConverterParameter = converterParameter,
						StringFormat = stringFormat,
						Source = source,
						FallbackValue = fallbackValue,
						TargetNullValue = targetNullValue
					};
				
					bindableObject.SetBinding(bindableProperty, binding);
				}
				""");
		}

		private void AppendInterceptorAttribute(SourceCodeLocation location)
		{
			AppendLine($"[InterceptsLocationAttribute(@\"{location.FilePath}\", {location.Line}, {location.Column})]");
		}

		private void AppendSetterAction(TypeDescription sourceType, IPathPart[] path)
		{
			var setter = Setter.From(sourceType, path);
			if (setter.PatternMatchingExpressions.Length > 0)
			{
				Append("if (");

				for (int i = 0; i < setter.PatternMatchingExpressions.Length; i++)
				{
					if (i == 1)
					{
						Indent();
					}

					if (i > 0)
					{
						AppendBlankLine();
						Append("&& ");
					}

					Append(setter.PatternMatchingExpressions[i]);
				}

				AppendLine(')');
				if (setter.PatternMatchingExpressions.Length > 1)
				{
					Unindent();
				}

				AppendLine('{');
				Indent();
			}

			AppendLine(setter.AssignmentStatement);

			if (setter.PatternMatchingExpressions.Length > 0)
			{
				Unindent();
				AppendLine('}');
			}
		}

		private void AppendHandlersArray(TypeDescription sourceType, IPathPart[] path)
		{
			AppendLine($"new Tuple<Func<{sourceType}, object?>, string>[]");
			AppendLine('{');

			Indent();

			string nextExpression = "source";
			foreach (var part in path)
			{
				var expression = nextExpression;
				nextExpression = AccessExpressionBuilder.Build(nextExpression, part);

				// Some parts don't have a property name, so we can't generate a handler for them (for example casts)
				var propertyName = part.PropertyName;
				if (propertyName is null)
				{
					continue;
				}

				Append("new(static source => ");
				Append(expression);
				AppendLine($", \"{part.PropertyName}\"),");
			}
			Unindent();

			Append('}');
		}

		public void Dispose()
		{
			_indentedTextWriter.Dispose();
			_stringWriter.Dispose();
		}

		private void AppendBlankLine() => _indentedTextWriter.WriteLine();
		private void AppendLine(string line) => _indentedTextWriter.WriteLine(line);
		private void AppendLine(char character) => _indentedTextWriter.WriteLine(character);
		private void Append(string str) => _indentedTextWriter.Write(str);
		private void Append(char character) => _indentedTextWriter.Write(character);
		private void AppendLines(string lines)
		{
			foreach (var line in lines.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries))
			{
				AppendLine(line.TrimEnd('\r'));
			}
		}

		private void Indent() => _indentedTextWriter.Indent++;
		private void Unindent() => _indentedTextWriter.Indent--;
	}
}